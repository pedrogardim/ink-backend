components:
  schemas:
    User:
      type: object
      properties:
        kind:
          type: string
          example: "user"
        self:
          type: string
          format: uri
          example: "http://localhost:3000/api/users/203"
        email:
          type: string
          format: email
          example: "new@user.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: integer
          example: 678293783
        profilePicUrl:
          type: string
          nullable: true
        id:
          type: integer
          example: 203
        role:
          type: string
          example: "client"
        createdAt:
          type: string
          format: date-time
          example: "2023-10-27T06:44:16.976Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-10-27T06:44:16.976Z"
    UserDataWrapper:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/User"
    AuthenticationResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            kind:
              type: string
              example: "authentication"
            token:
              type: string
              format: jwt
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            tokenIat:
              type: string
              format: date-time
              example: "2023-10-27T08:44:16.998Z"
            tokenExp:
              type: string
              format: date-time
              example: "2023-10-27T09:44:16.998Z"
            user:
              $ref: "#/components/schemas/User"
    RegisterPayload:
      type: object
      properties:
        firstName:
          type: string
          default: "John"
        lastName:
          type: string
          default: "Doe"
        phoneNumber:
          type: number
          default: 678293783
        email:
          type: string
          default: "new@user.com"
        password:
          type: string
          default: "abc12345"
    LoginPayload:
      type: object
      properties:
        email:
          type: string
          default: "admin@admin.com"
        password:
          type: string
          default: "1234"
    Pagination:
      type: object
      properties:
        kind:
          type: string
          default: "user"
        currentItemCount:
          type: integer
          default: 10
        itemsPerPage:
          type: integer
          default: 10
        startIndex:
          type: integer
          default: 1
        totalItems:
          type: integer
          default: 202
        self:
          type: string
          format: uri
          default: "http://localhost:3000/api/users/?page=2"
        next:
          type: string
          format: uri
          default: "http://localhost:3000/api/users/?page=3"
        previous:
          type: string
          format: uri
          default: "http://localhost:3000/api/users/?page=1"
        pageIndex:
          type: integer
          default: 1
        totalPages:
          type: integer
          default: 21
    AppointmentPaginationResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AppointmentDataPagination"
    AppointmentDataPagination:
      type: object
      properties:
        kind:
          type: string
          example: "appointment"
        currentItemCount:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        startIndex:
          type: integer
          example: 1
        totalItems:
          type: integer
          example: 1
        self:
          type: string
          format: uri
        pageIndex:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: "#/components/schemas/AppointmentResponse"

    AppointmentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AppointmentData"

    AppointmentData:
      type: object
      properties:
        kind:
          type: string
          example: "appointment"
        self:
          type: string
          format: uri
        id:
          type: integer
          example: 1
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        clientId:
          type: integer
        tattooistId:
          type: integer
        type:
          type: string
          example: "tattoo"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        client:
          $ref: "#/components/schemas/User"
        tattooist:
          $ref: "#/components/schemas/User"
    AppointmentPayload:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        clientId:
          type: integer
        tattooistId:
          type: integer
        description:
          type: string
        type:
          type: string

    AppointmentUpdatePayload:
      type: object
      properties:
        description:
          type: string
    TattooWork:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: ID of the Tattoo Work.
        description:
          type: string
          maxLength: 256
          description: Description of the tattoo work.
        imageUrl:
          type: string
          maxLength: 2000
          description: URL where the tattoo photo can be found.
          nullable: true
        tattooistId:
          type: integer
          format: int32
          description: ID for the tattooist.
          default: 200
        type:
          type: string
          enum:
            - tattoo
            - piercing
          description: Type of work, either "tattoo" or "piercing".
        createdAt:
          type: string
          format: date-time
          description: Date and time when the tattoo work was created.
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the tattoo work was last updated.
    TattooWorkPayload:
      type: object
      properties:
        description:
          type: string
          maxLength: 256
          description: Description of the tattoo work.
        imageUrl:
          type: string
          maxLength: 2000
          description: URL where the tattoo photo can be found.
          nullable: true
        tattooistId:
          type: integer
          format: int32
          description: ID for the tattooist.
          default: 200
        type:
          type: string
          enum:
            - tattoo
            - piercing
          description: Type of work, either "tattoo" or "piercing".
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
